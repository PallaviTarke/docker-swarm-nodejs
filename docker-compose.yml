services:
  loki:
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - /home/azureuser/my-app/loki-data/chunks:/loki/chunks
      - /home/azureuser/my-app/loki-data/rules:/loki/rules
      - /home/azureuser/my-app/loki-data/index:/loki/index
      - /home/azureuser/my-app/loki-data/compactor:/loki/compactor
      - /home/azureuser/my-app/loki-data/wal:/loki/wal
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-net

  promtail:
    image: grafana/promtail:2.9.4
    command: -config.file=/etc/promtail/promtail.yaml
    volumes:
      - ./promtail-config.yaml:/etc/promtail/promtail.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /etc/hostname:/etc/hostname:ro
      - /etc/os-release:/etc/os-release:ro
    networks:
      - app-net

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-net

  mongo1:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo1-data:/data/db
    command: >
      bash -c "
        mongod --replSet rs0 --bind_ip_all &
        until mongosh --host localhost --eval 'db.runCommand({ ping: 1 })' >/dev/null 2>&1; do
          echo 'Waiting for MongoDB to start...'; sleep 2;
        done;
        if ! mongosh --host localhost --eval 'rs.status()' | grep -q 'myState'; then
          echo 'Initializing replica set...';
          mongosh --host localhost --eval \"
            rs.initiate({
              _id: 'rs0',
              members: [
                { _id: 0, host: 'mongo1:27017' },
                { _id: 1, host: 'mongo2:27017' },
                { _id: 2, host: 'mongo3:27017' }
              ]
            })
          \"
        else
          echo 'Replica set already initialized.';
        fi;
        tail -f /dev/null
      "
    networks:
      - app-net

  mongo2:
    image: mongo:6
    volumes:
      - mongo2-data:/data/db
    command: ["mongod", "--replSet", "rs0"]
    networks:
      - app-net

  mongo3:
    image: mongo:6
    volumes:
      - mongo3-data:/data/db
    command: ["mongod", "--replSet", "rs0"]
    networks:
      - app-net

  redis-master:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis-master-data:/data
    networks:
      - app-net

  redis-replica1:
    image: redis:7
    volumes:
      - redis-replica1-data:/data
    command: ["redis-server", "--replicaof", "redis-master", "6379"]
    networks:
      - app-net

  redis-replica2:
    image: redis:7
    volumes:
      - redis-replica2-data:/data
    command: ["redis-server", "--replicaof", "redis-master", "6379"]
    networks:
      - app-net

  redis-sentinel1:
    image: redis:7
    volumes:
      - ./redis-sentinel-entrypoint.sh:/usr/local/bin/redis-sentinel-entrypoint.sh
    entrypoint: ["bash", "/usr/local/bin/redis-sentinel-entrypoint.sh"]
    networks:
      - app-net

  redis-sentinel2:
    image: redis:7
    volumes:
      - ./redis-sentinel-entrypoint.sh:/usr/local/bin/redis-sentinel-entrypoint.sh
    entrypoint: ["bash", "/usr/local/bin/redis-sentinel-entrypoint.sh"]
    networks:
      - app-net

  redis-sentinel3:
    image: redis:7
    volumes:
      - ./redis-sentinel-entrypoint.sh:/usr/local/bin/redis-sentinel-entrypoint.sh
    entrypoint: ["bash", "/usr/local/bin/redis-sentinel-entrypoint.sh"]
    networks:
      - app-net

  backend:
    image: capslock2806/my-app-backend:latest
    ports:
      - "3000:3000"
    networks:
      - app-net

  frontend:
    image: capslock2806/my-app-frontend:latest
    networks:
      - app-net

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - app-net

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-net

  grafana:
    image: grafana/grafana
    volumes: 
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - app-net

  redis_exporter:
    image: oliver006/redis_exporter
    ports:
      - "9121:9121"
    command:
      - '--redis.addr=redis://haproxy:6380'
    networks:
      - app-net

  haproxy:
    image: haproxy:latest
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - "6380:6380"
    networks:
      - app-net

  node_exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"
    networks:
      - app-net

  mongodb_exporter:
    image: percona/mongodb_exporter:0.40.0
    ports:
      - "9216:9216"
    command:
      - "--mongodb.uri=mongodb://mongodb_exporter_user:securepassword@mongo1:27017,mongo2:27017,mongo3:27017/admin?replicaSet=rs0"
      - "--collect-all"
      - "--log.level=debug"
    networks:
      - app-net

volumes:
  mongo1-data:
  mongo2-data:
  mongo3-data:
  redis-master-data:
  redis-replica1-data:
  redis-replica2-data:
  grafana-data:
  loki-chunks:
  loki-rules:
  loki-index:
  loki-compactor:
  loki-wal:

networks:
  app-net:
    driver: overlay

